apiVersion: v1
kind: Namespace
metadata:
  name: devops-ucu
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chocoapp
  namespace: devops-ucu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chocoapp
  template:
    metadata:
      labels:
        app: chocoapp
    spec:
      containers:
        - name: chocoapp
          image: registry.konoba.space/chocoapp:p95
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: chocoapp-svc
  namespace: devops-ucu
spec:
  selector:
    app: chocoapp
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 8080
      nodePort: 30880
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: devops-ucu
data:
  prometheus.yml: |
    global:
      scrape_interval: 1s
      evaluation_interval: 1s
      external_labels:
        cluster: k3s
        namespace: devops-ucu

    rule_files:
      - /etc/prometheus/rules/*.yml

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'chocoapp'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['chocoapp-svc.devops-ucu.svc.cluster.local:80']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: devops-ucu
data:
  rules.yml: |
    groups:
      - name: chocoapp.rules
        rules:
          - alert: HighOrderRate
            expr: sum(rate(chocoapp_orders_total[30s])) > 5
            for: 30s
            labels:
              severity: warning
              service: chocoapp
            annotations:
              summary: "Tasa alta de órdenes (>5/30s)"
              description: "La tasa de órdenes es {{ $value }} en los últimos 30s."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: devops-ucu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
        - name: prometheus-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
  namespace: devops-ucu
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - name: http
      port: 9090
      targetPort: 9090
      nodePort: 30900
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
  namespace: devops-ucu
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-svc.devops-ucu.svc.cluster.local:9090
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-provider
  namespace: devops-ucu
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'k8s-imported'
        orgId: 1
        folder: 'Chocolatería'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 5
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: devops-ucu
data:
  tecnico.json: |
    {
      "title": "Chocolatería - Infraestructura",
      "timezone": "browser",
      "schemaVersion": 39,
      "version": 5,
      "refresh": "1s",
      "time": { "from": "now-10m", "to": "now" },
      "panels": [
        {
          "type": "timeseries",
          "title": "Requests (30s)",
          "targets": [{ "expr": "sum(rate(http_server_requests_seconds_count[30s]))" }],
          "gridPos": { "h": 10, "w": 24, "x": 0, "y": 0 }
        },
        {
          "type": "timeseries",
          "title": "Latencia p95 (30s)",
          "targets": [{ "expr": "histogram_quantile(0.95, sum by (le) (rate(http_server_requests_seconds_bucket[30s])))" }],
          "gridPos": { "h": 10, "w": 24, "x": 0, "y": 10 }
        },
        {
          "type": "timeseries",
          "title": "Errores 5xx (30s)",
          "targets": [{ "expr": "sum(rate(http_server_requests_seconds_count{status=~\"5..\"}[30s]))" }],
          "description": "Si no hay 5xx, este panel puede estar vacío.",
          "gridPos": { "h": 8, "w": 24, "x": 0, "y": 20 }
        },
        {
          "type": "timeseries",
          "title": "CPU del proceso",
          "targets": [{ "expr": "process_cpu_usage" }],
          "gridPos": { "h": 8, "w": 12, "x": 0, "y": 28 }
        },
        {
          "type": "timeseries",
          "title": "JVM Heap usado (bytes)",
          "targets": [{ "expr": "sum by (area) (jvm_memory_used_bytes{area=\"heap\"})" }],
          "gridPos": { "h": 8, "w": 12, "x": 12, "y": 28 }
        }
      ]
    }
  negocio.json: |
    {
      "title": "Chocolatería - Órdenes",
      "timezone": "browser",
      "schemaVersion": 39,
      "version": 6,
      "refresh": "1s",
      "time": {
        "from": "now-10m",
        "to": "now"},
      "panels": [
        {
          "type": "timeseries",
          "title": "Órdenes",
          "legend": {
            "show": true},
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count{method=\"POST\",uri=\"/api/orders\"}[30s]))"}
          ],
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 0}
        },
        {
          "type": "timeseries",
          "title": "Órdenes por estado",
          "legend": {
            "show": true},
          "targets": [
            {
              "expr": "sum by (status) (rate(http_server_requests_seconds_count{method=\"POST\",uri=\"/api/orders\"}[30s]))"}
          ],
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 10}
        },
        {
          "type": "timeseries",
          "title": "Latencia p95 de órdenes",
          "legend": {
            "show": false},
          "targets": [
            {
              "expr": "histogram_quantile(0.95, sum by (le) (rate(http_server_requests_seconds_bucket{method=\"POST\",uri=\"/api/orders\"}[30s])))"}
          ],
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 20}
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: devops-ucu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
          volumeMounts:
            - name: grafana-datasource
              mountPath: /etc/grafana/provisioning/datasources/
            - name: grafana-dashboard-provider
              mountPath: /etc/grafana/provisioning/dashboards/
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: grafana-datasource
          configMap:
            name: grafana-datasource
        - name: grafana-dashboard-provider
          configMap:
            name: grafana-dashboard-provider
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
  namespace: devops-ucu
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      nodePort: 30300
---
apiVersion: batch/v1
kind: Job
metadata:
  name: chocoapp-loadgen-once
  namespace: devops-ucu
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 600
  template:
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-chocoapp
          image: alpine:3.20
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              apk add --no-cache curl >/dev/null
              BASE="http://chocoapp-svc.devops-ucu.svc.cluster.local:80"
              echo "[wait] Esperando a ${BASE}/actuator/health ..."
              for i in $(seq 1 300); do
                if curl -fsS "${BASE}/actuator/health" | grep -q '"status":"UP"'; then
                  echo "[wait] chocoapp está UP ✅"; exit 0
                fi
                echo "[wait] intento $i: reintento en 2s..."
                sleep 2
              done
              echo "[wait] timeout esperando a chocoapp"; exit 1
      containers:
        - name: loadgen
          image: alpine:3.20
          imagePullPolicy: IfNotPresent
          env:
            - name: HEALTH_PINGS
              value: "40"
            - name: ORDERS
              value: "150"
            - name: SLEEP
              value: "0.01"
            - name: BASE
              value: "http://chocoapp-svc.devops-ucu.svc.cluster.local:80"
            - name: PE
              value: "/api/products"
            - name: OE
              value: "/api/orders"
          command: ["/bin/sh","-c"]
          args:
          - |
            set -e
            apk add --no-cache curl coreutils >/dev/null

            echo "[warmup] ${BASE}/actuator/prometheus"
            curl -fsS "${BASE}/actuator/prometheus" >/dev/null || true

            i=0; while [ $i -lt "${HEALTH_PINGS}" ]; do
              curl -fsS -o /dev/null "${BASE}/actuator/health" || true
              i=$((i+1)); sleep "${SLEEP}"
            done

            new_product() {
              name="$1"; price="$2"
              code=$(curl -sS -o /dev/null -w "%{http_code}" \
                     -H 'Content-Type: application/json' \
                     -d "{\"name\":\"${name}\",\"priceCents\":${price}}" \
                     "${BASE}${PE}" || echo "000")
              echo "[product] ${name} -> ${code}"
            }

            new_product "capuccino" 215
            new_product "brownie" 245
            new_product "latte" 137
            new_product "medialuna" 208
            new_product "submarino" 206
            new_product "mocaccino" 148
            new_product "chocolate_caliente" 198

            IDS="$(curl -fsS "${BASE}${PE}" | sed -n 's/.*\"id\":[ ]*\([0-9][0-9]*\).*/\1/p' | tr '\n' ' ')"
            if [ -z "${IDS}" ]; then
              echo "[error] no hay IDs de productos. abortando."
              exit 0
            fi
            echo "[ids] ${IDS}"

            pick_id() { for x in ${IDS}; do echo "$x"; done | shuf -n 1; }
            rand_qty() { shuf -i 1-3 -n 1; }

            echo "[orders] creando ${ORDERS} órdenes…"
            i=0
            while [ $i -lt "${ORDERS}" ]; do
              id="$(pick_id)"; q="$(rand_qty)"
              code=$(curl -sS -o /dev/null -w "%{http_code}" \
                     -X POST "${BASE}${OE}?productId=${id}&quantity=${q}" || echo "000")
              echo "[order] #$i id=${id} qty=${q} -> ${code}"
              i=$((i+1)); sleep "${SLEEP}"
            done

            curl -sS -o /dev/null "${BASE}/does-not-exist" || true

            echo "[done] carga enviada"